<?xml version="1.0" encoding="UTF-8"?>
<svg width="1200" height="800" 
     version="1.1" 
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <!--
    Beta CPU (“Our Final Answer”) - SVG示例
    注意：此示例仅作为如何使用SVG绘制CPU示意图的参考，并不完全精确。
    你可根据实际需要调整坐标、尺寸、文字等，甚至拆分成多个元素进行更精细的绘制。
  -->

  <style>
    /* 简单的样式示例，可根据需求自定义 */
    .block {
      fill: #f0f0f0;       /* 模块背景色 */
      stroke: #000000;     /* 模块边框颜色 */
      stroke-width: 1.5;
    }
    .signal-line {
      stroke: #000;
      stroke-width: 1.2;
      fill: none;
    }
    .arrow {
      /* 定义箭头标记，用于画带箭头的信号线 */
      marker-end: url(#arrowhead);
    }
    .label {
      font-family: "Arial", sans-serif;
      font-size: 14px;
    }
    .title {
      font-size: 20px;
      font-weight: bold;
    }
    .sub-title {
      font-size: 16px;
      font-weight: bold;
    }
  </style>

  <!-- 定义一个箭头标记，给信号线使用 -->
  <defs>
    <marker id="arrowhead" markerWidth="8" markerHeight="8" 
            refX="5" refY="2" orient="auto">
      <path d="M0,0 L0,4 L6,2 Z" fill="#000" />
    </marker>
  </defs>

  <!-- 标题 -->
  <text x="50" y="40" class="title">Beta: Our "Final Answer"</text>

  <!-- ===================== PC 及其复位MUX/PCSEL区域 ===================== -->
  <!-- 这里用一个矩形代表PC寄存器 -->
  <rect x="50" y="80" width="60" height="30" class="block"></rect>
  <text x="55" y="100" class="label">PC</text>
  
  <!-- 复位、多路选择器示意(简化)，只画一个小矩形代表MUX -->
  <rect x="50" y="120" width="60" height="20" class="block"></rect>
  <text x="52" y="134" class="label">PCSEL</text>
  
  <!-- 从PC出来的线，走到下方 +4 单元 -->
  <line x1="80" y1="110" x2="80" y2="140" class="signal-line arrow" />
  
  <!-- ===================== +4 加法器 ===================== -->
  <rect x="70" y="140" width="20" height="20" class="block"></rect>
  <text x="71" y="155" class="label">+4</text>
  
  <!-- 加法器输出，接到(PC+4)线，向下延伸 -->
  <line x1="80" y1="160" x2="80" y2="180" class="signal-line arrow" />
  <text x="82" y="175" class="label">(PC+4)</text>

  <!-- ===================== Instruction Memory ===================== -->
  <rect x="150" y="50" width="120" height="50" fill="#FFFF99" stroke="#000" stroke-width="1.5"></rect>
  <text x="155" y="70" class="label">Instruction Memory</text>
  <text x="155" y="88" class="label">A / D (ID[31:0])</text>

  <!-- PC -> Instruction Memory 地址线 -->
  <line x1="110" y1="95" x2="150" y2="95" class="signal-line arrow" />
  <text x="120" y="90" class="label">PC</text>

  <!-- ===================== Register File ===================== -->
  <rect x="150" y="160" width="160" height="80" fill="#cce5ff" stroke="#000" stroke-width="1.5"></rect>
  <text x="160" y="180" class="label">Register File</text>
  <text x="160" y="198" class="label">(Ra:Rb:Rc / RD1:RD2 / WD)</text>
  <text x="160" y="216" class="label">WERF</text>
  
  <!-- Instruction Memory -> Register File 的 ID[] 连接线 (简化，标示ID[31:0]分拆给Ra, Rb, Rc等) -->
  <line x1="210" y1="100" x2="210" y2="160" class="signal-line"/>
  <text x="212" y="130" class="label">ID[31:0]</text>

  <!-- (PC+4) -> Register File (JT输入、或XP等) 简化 -->
  <line x1="80" y1="180" x2="150" y2="180" class="signal-line"/>
  <text x="95" y="175" class="label">(PC+4)</text>

  <!-- ===================== Control Logic ===================== -->
  <rect x="340" y="250" width="130" height="100" fill="#99ccff" stroke="#000" stroke-width="1.5"></rect>
  <text x="345" y="270" class="label">Control Logic</text>
  <!-- 控制信号简写展示 -->
  <text x="345" y="288" class="label">ALUFN, ASEL, BSEL,</text>
  <text x="345" y="306" class="label">MOE, MWR, PCSEL,</text>
  <text x="345" y="324" class="label">RA2SEL, WASEL,</text>
  <text x="345" y="342" class="label">WDSEL, WERF, ...</text>

  <!-- 控制逻辑输出线示例：连接到寄存器文件/ALU/数据存储器等 -->
  <line x1="340" y1="280" x2="310" y2="200" class="signal-line arrow" />
  <text x="316" y="240" class="label" transform="rotate(-30,310,200)">控制信号</text>

  <!-- ===================== ALU ===================== -->
  <!-- 用一个多边形表示ALU形状，也可直接用矩形 -->
  <polygon points="400,140 460,140 480,190 460,240 400,240 380,190"
           fill="#b3b3b3" stroke="#000" stroke-width="1.5"></polygon>
  <text x="415" y="190" class="label">ALU</text>
  
  <!-- ALU输入A、B示意 (来自寄存器文件RD1、RD2) -->
  <line x1="310" y1="180" x2="400" y2="180" class="signal-line arrow" />
  <text x="330" y="175" class="label">RD1 -> A</text>

  <line x1="310" y1="220" x2="400" y2="220" class="signal-line arrow" />
  <text x="330" y="215" class="label">RD2 -> B</text>

  <!-- ALU输出：PC+4 或 数据线 (Z) -->
  <line x1="480" y1="190" x2="520" y2="190" class="signal-line arrow" />
  <text x="485" y="185" class="label">(Z)</text>

  <!-- ===================== Data Memory ===================== -->
  <rect x="520" y="150" width="120" height="80" fill="#FFFF99" stroke="#000" stroke-width="1.5"></rect>
  <text x="525" y="170" class="label">Data Memory</text>
  <text x="525" y="188" class="label">WD / WE / OE</text>
  <text x="525" y="206" class="label">MWR, MOE</text>

  <!-- 从ALU到Data Memory的地址线/数据线 -->
  <line x1="520" y1="190" x2="480" y2="190" class="signal-line"/>
  <text x="500" y="185" class="label">Adr / KD</text>

  <!-- 从Data Memory出来的读数据返回 (简化) -->
  <line x1="640" y1="190" x2="680" y2="190" class="signal-line arrow" />
  <text x="645" y="185" class="label">Data Out</text>

  <!-- 下方可以再继续画PC <- ... 等返送线，或IRQ,Z,JT等细节线 -->
  <!-- 这里仅示意主要模块。你可以继续细化。 -->

  <!-- 版权或作者信息 -->
  <text x="50" y="780" class="label" fill="#888">（示例SVG，仅供参考，请根据需要调整细节）</text>
</svg>
